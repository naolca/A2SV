class Solution:
    def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:

        ancestors = defaultdict(list)
        n = len(quiet)
        pre = [0 for i in range(n)]
        d = defaultdict(list)

        for f, t in richer:
            d[f].append(t)
            pre[t] += 1
            ancestors[t].append(f)

        todo = deque()
        for i in range(n):
            if pre[i] == 0:
                todo.appendleft(i)
        res = [set() for _ in range(n)]
        while todo:
            curr = todo.pop()
            for decendent in d[curr]:

                res[decendent].add(curr)
                res[decendent].update(res[curr])

                pre[decendent] -= 1
                if pre[decendent] == 0:
                    todo.appendleft(decendent)
        
        for i in range(len(res)):
            res[i].add(i)
            res[i] = sorted(list(res[i]),key = lambda x: quiet[x])
        for i in range(len(res)):
            res[i] = res[i][0]
        # print(res)
        
        return res
