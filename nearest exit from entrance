class Solution:
    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:


        queue = deque([entrance+[0]])
        r, c = entrance
        seen = set()
        seen.add((r,c))

        is_exit = lambda r, c : r == 0 or r >= len(maze)-1 or c == 0 or c >= len(maze[0])-1 
        in_bound = lambda r, c : r >= 0 and r < len(maze) and c >= 0 and c < len(maze[0])

        directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]


        while queue:
            # print(queue)
            # print(seen)

            curr_row, curr_col, curr_length = queue.pop()
            # print(curr_row, curr_col)

            if is_exit(curr_row, curr_col) and [curr_row,curr_col] != entrance:
                return curr_length
            
            for dx, dy in directions:
                new_row, new_col = curr_row + dx, curr_col + dy
                

                if in_bound(new_row, new_col) and (new_row, new_col) not in seen and maze[new_row][new_col] == ".":
                    # print(new_row, new_col)
                    seen.add((new_row, new_col))
                    queue.appendleft((new_row, new_col, curr_length + 1))
        return -1
