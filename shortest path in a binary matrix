class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        def valid(r,c):
            return r >= 0 and r < n and c >= 0 and c < m
            
        directions=[[1,0], [-1,0], [0,1], [0,-1], 
                    [1,1], [-1,-1], [-1,1], [1,-1]]

        exitt = (len(grid)-1, len(grid[0])-1)

        if grid[0][0] == 1 or grid[-1][-1] == 1:
            return -1

        queue = deque([(0, 0)])
        path = 0
        seen = set([(0, 0)])

        while queue:
            for _ in range(len(queue)):
                curr_row , curr_col = queue.pop()
                
                if (curr_row,curr_col) == exitt:
                    return path + 1


                for dx, dy in directions:
                    new_row, new_col = curr_row + dx, curr_col + dy
                    if valid(new_row, new_col) and grid[new_row][new_col] == 0 and\
                         (new_row, new_col) not in seen:
                        seen.add((new_row, new_col))
                        queue.appendleft((new_row, new_col))

            path += 1
        return -1

                        
                        

        
        
        
                
            


       
