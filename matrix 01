class Solution(object):
    def updateMatrix(self, mat):
        """
        :type mat: List[List[int]]
        :rtype: List[List[int]]
        """
        n=len(mat)
        m=len(mat[0])
        

        def valid(r,c):
            return r >= 0 and r < n and c >= 0 and c < m

        queue = deque([])

        directions = [[1,0],[-1,0],[0,1],[0,-1]]
        seen=set()
        for r in range(len(mat)):
            for c in range(len(mat[0])):
                if mat[r][c]==0:
                    queue.appendleft((r,c,0))
        while queue:
            curr_row, curr_col, path = queue.pop()

            if mat[curr_row][curr_col]==1:
                mat[curr_row][curr_col]=path
            for dx,dy in directions:
                new_row, new_col = curr_row+dx, curr_col+dy
                if valid(new_row, new_col) and  (new_row, new_col) not in seen:
                    seen.add((new_row, new_col))
                    queue.appendleft((new_row, new_col, path+1))
        
        return mat
                    

