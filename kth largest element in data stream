class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.k = k
        # self.nums = nums
        # nums = [-i for i in nums]
        heapify(nums)
        while len(nums) > k:
            heappop(nums)
        self.nums = nums
        # self.largest=[]
      
        # print(self.nums)
        # print(self.largest)

        
        # print(self.nums)

        

    def add(self, val: int) -> int:


        heappush(self.nums,val)
        if len(self.nums)>self.k:
            heappop(self.nums)
        return self.nums[0]

       
        
        # curr=self.nums[0]
        # if val > curr:
        #     heappop(self.nums)
        #     heappush(self.nums,val)
        #     return self.nums[0]
        # else:
        #     return curr


        


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
