# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:



    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:

        res = 0
        q = deque([[0, root]])
        while q:
            res = max(res, (q[-1][0] - q[0][0]) + 1)
            for _ in range(len(q)):
                j, node = q.popleft()
                if node.left: q.append([j*2, node.left])
                if node.right: q.append([(j*2)+1, node.right])
        return res
        # times=self.depth(root)
        # # print(times)
        # i=0
        # res=[]
        # q=deque([root])
        # if not root:
        #     return []
        # while q and i<times:
        #     nodes=[]
        #     temp=[]
        #     while q:
        #         curr=q.pop()
        #         if curr==None:
        #             temp.append(curr)
        #             # temp.append(curr)
        #             # temp.append(curr)
        #         else:
        #             temp.append(curr.val)

        #         nodes.append(curr)
                
               
        #     res.append(temp)
        

        #     for node in nodes:   
        #         if node:
        #             q.appendleft(node.left)
        #             q.appendleft(node.right)
            
        #         else:
        #             q.appendleft(node)
        #             q.appendleft(node)
        #     i+=1
        # # res.pop()
        # # print(res)
        # for level in res:
        #     while level[0]==None:
        #         level.pop(0)
        #     while level[-1]==None:
        #         level.pop()
        # # print(res)
        # maximum=0
        # for level in res:
        #     maximum=max(maximum,len(level))
        
        
        # return maximum
