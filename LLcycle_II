# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:

        fast,slow=head,head
        while fast and fast.next and fast.next.next:
            fast=fast.next.next
            slow=slow.next
            
            if fast==slow:
                p1,p2=head,fast
                while p1!=p2:
                    p1=p1.next
                    p2=p2.next
                return p1
        return None



        # seen = set()
        # dummy=head

        # while dummy:
        #     if dummy in seen:
        #         return dummy
        #     else:
        #         seen.add(dummy)
        #     dummy=dummy.next
        # return None

        # seen={}
        # dummy=head
        
        # while dummy:
        #     if dummy in seen:
        #         return seen[dummy]
                
        #     else:
        #         seen[dummy]=dummy
        #     dummy=dummy.next
        # return None
