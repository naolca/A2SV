class Solution:
    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:

        d = defaultdict(list)
        indegree = [0 for i in range(n)]
        if n == 1:
            return [0]

        for f, t in edges:
            d[f].append(t)
            d[t].append(f)
            indegree[f] += 1
            indegree[t] += 1
        todo = deque()
        seen = set()
       
        for i in range(n):
            if indegree[i] == 1:
                todo.appendleft(i)
                seen.add(i)
                
        while todo:
            if len(seen) == n:
                return list(todo)
            for i in range(len(todo)):
                curr = todo.pop()
                for nei in d[curr]:
                    indegree[nei] -= 1
                    if indegree[nei] == 1 and nei not in seen:
                        seen.add(nei)
                        todo.appendleft(nei)
        return list(todo)
            
                
        
        
        # print(d)
        # def dfs(node,path):
        #     nonlocal general_min
        #     nonlocal seen
            

        #     if node in seen:
        #         return path + pathes[node]
            
        #     seen.add(node)
        #     for child in d[node]:
        #         if child not in seen:
        #             path = max(path, dfs(child, path+1))
        #     general_min = min(general_min,path)
        #     # print(node,path)
        #     print(node,seen,path)
            
        #     return path
        # general_min = float('inf')
        # pathes = defaultdict(int)
        # seen = set()
        # for node in range(n):
        #     pathes[node] = dfs(node,0)
        # # print(general_min)
        # # print(pathes)
        # return []


            
            
