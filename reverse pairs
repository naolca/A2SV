class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        ans=0
        def mergeSort(list2bsorted):
            nonlocal ans
            if len(list2bsorted)>1:
                mid = len(list2bsorted)//2
                leftarray=list2bsorted[:mid]
                rightarray=list2bsorted[mid:]
                mergeSort(leftarray)
                mergeSort(rightarray)
                i=0
                j=0
                k=0
                while i<len(leftarray):
                    while j<len(rightarray) and leftarray[i]>2*rightarray[j]:
                        j+=1
                    ans+=j
                    i+=1
                i=0
                j=0
                k=0
                while i<len(leftarray) and j<len(rightarray):
                    if leftarray[i]<rightarray[j]:
                        list2bsorted[k]=leftarray[i]
                        i+=1
                    else:
                        list2bsorted[k]=rightarray[j]
                        j+=1
                    k+=1
                while i<len(leftarray):
                    list2bsorted[k]=leftarray[i]
                    i+=1
                    k+=1
                while j<len(rightarray):
                    list2bsorted[k]=rightarray[j]
                    j+=1
                    k+=1
            return list2bsorted
                    # for k in range(len(rightarray)):
                    #     if leftarray[i]>2*rightarray[k]:
                    #         ans+=1
                    # i+=1
                    

                        
                        
            return list2bsorted
        mergeSort(nums)
        return ans
                        
